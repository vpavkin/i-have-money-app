app {
  host = "127.0.0.1"
  host = ${?ihavemoney_writeback_host}
  port = 9101
  port = ${?ihavemoney_writeback_port}
  system = "iHaveMoneyWriteBackend"
  number-of-nodes = 1

  db {
    host = "127.0.0.1"
    host = ${?ihavemoney_writeback_db_host}
    port = "5432"
    port = ${?ihavemoney_writeback_db_port}
    name = "ihavemoney-write"
    name = ${?ihavemoney_writeback_db_name}
    user = "admin"
    user = ${?ihavemoney_writeback_db_user}
    password = "changeit"
    password = ${?ihavemoney_writeback_db_password}
  }

  writefront {
    host = "127.0.0.1"
    host = ${?ihavemoney_writefront_host}
    port = 8101
    port = ${?ihavemoney_writefront_http_port}
  }
}

funcqrs {
  akka {
    aggregates {
      events-per-snapshot = 200
    }
  }
}

akka {

  loglevel = "INFO"

  extensions = ["akka.cluster.client.ClusterClientReceptionist", "akka.cluster.ddata.DistributedData"]

  persistence {
    journal {
      plugin = "jdbc-journal"
      auto-start-journals = ["jdbc-journal"]
    }
    snapshot-store {
      plugin = "jdbc-snapshot-store"
      auto-start-snapshot-stores = ["jdbc-snapshot-store"]
    }
  }

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"

    serializers {
      proto = "akka.remote.serialization.ProtobufSerializer"

      snapshot = "ru.pavkin.ihavemoney.serialization.SnapshotSerializer"

      CommandEnvelope = "ru.pavkin.ihavemoney.serialization.CommandEnvelopeSerializer"

      FinishInitialization = "ru.pavkin.ihavemoney.serialization.FinishInitializationSerializer"
      ReceiveIncome = "ru.pavkin.ihavemoney.serialization.ReceiveIncomeSerializer"
      Spend = "ru.pavkin.ihavemoney.serialization.SpendSerializer"
      CreateFortune = "ru.pavkin.ihavemoney.serialization.CreateFortuneSerializer"
      AddEditor = "ru.pavkin.ihavemoney.serialization.AddEditorSerializer"
      BuyAsset = "ru.pavkin.ihavemoney.serialization.BuyAssetSerializer"
      SellAsset = "ru.pavkin.ihavemoney.serialization.SellAssetSerializer"
      ReevaluateAsset = "ru.pavkin.ihavemoney.serialization.ReevaluateAssetSerializer"
      TakeOnLiability = "ru.pavkin.ihavemoney.serialization.TakeOnLiabilitySerializer"
      PayLiabilityOff = "ru.pavkin.ihavemoney.serialization.PayLiabilityOffSerializer"
      CreateUser = "ru.pavkin.ihavemoney.serialization.CreateUserSerializer"
      LoginUser = "ru.pavkin.ihavemoney.serialization.LoginUserSerializer"
      ConfirmEmail = "ru.pavkin.ihavemoney.serialization.ConfirmEmailSerializer"
      ResendConfirmationEmail = "ru.pavkin.ihavemoney.serialization.ResendConfirmationEmailSerializer"
      ExchangeCurrency = "ru.pavkin.ihavemoney.serialization.ExchangeCurrencySerializer"
      CorrectBalances = "ru.pavkin.ihavemoney.serialization.CorrectBalancesSerializer"
      UpdateLimits = "ru.pavkin.ihavemoney.serialization.UpdateLimitsSerializer"
      CancelTransaction = "ru.pavkin.ihavemoney.serialization.CancelTransactionSerializer"
    }

    serialization-bindings {
      "com.trueaccord.scalapb.GeneratedMessage" = proto

      "ru.pavkin.ihavemoney.domain.fortune.Fortune" = snapshot

      "ru.pavkin.ihavemoney.domain.fortune.FortuneProtocol$FinishInitialization" = FinishInitialization
      "ru.pavkin.ihavemoney.domain.fortune.FortuneProtocol$ReceiveIncome" = ReceiveIncome
      "ru.pavkin.ihavemoney.domain.fortune.FortuneProtocol$Spend" = Spend
      "ru.pavkin.ihavemoney.domain.fortune.FortuneProtocol$CreateFortune" = CreateFortune
      "ru.pavkin.ihavemoney.domain.fortune.FortuneProtocol$AddEditor" = AddEditor
      "ru.pavkin.ihavemoney.domain.fortune.FortuneProtocol$BuyAsset" = BuyAsset
      "ru.pavkin.ihavemoney.domain.fortune.FortuneProtocol$SellAsset" = SellAsset
      "ru.pavkin.ihavemoney.domain.fortune.FortuneProtocol$ReevaluateAsset" = ReevaluateAsset
      "ru.pavkin.ihavemoney.domain.fortune.FortuneProtocol$TakeOnLiability" = TakeOnLiability
      "ru.pavkin.ihavemoney.domain.fortune.FortuneProtocol$PayLiabilityOff" = PayLiabilityOff
      "ru.pavkin.ihavemoney.domain.fortune.FortuneProtocol$ExchangeCurrency" = ExchangeCurrency
      "ru.pavkin.ihavemoney.domain.fortune.FortuneProtocol$CorrectBalances" = CorrectBalances
      "ru.pavkin.ihavemoney.domain.fortune.FortuneProtocol$UpdateLimits" = UpdateLimits
      "ru.pavkin.ihavemoney.domain.fortune.FortuneProtocol$CancelTransaction" = CancelTransaction
      "ru.pavkin.ihavemoney.domain.user.UserProtocol$CreateUser" = CreateUser
      "ru.pavkin.ihavemoney.domain.user.UserProtocol$LoginUser" = LoginUser
      "ru.pavkin.ihavemoney.domain.user.UserProtocol$ConfirmEmail" = ConfirmEmail
      "ru.pavkin.ihavemoney.domain.user.UserProtocol$ResendConfirmationEmail" = ResendConfirmationEmail
      "ru.pavkin.ihavemoney.domain.CommandEnvelope" = CommandEnvelope
    }

    serialization-identifiers {
      "ru.pavkin.ihavemoney.serialization.SnapshotSerializer" = 8
    }
  }

  remote {
    enabled-transports = ["akka.remote.netty.tcp"]
    netty.tcp {
      hostname = ${app.host}
      port = ${app.port}
    }
  }

  cluster {
    seed-nodes = [
      "akka.tcp://"${app.system}"@"${app.host}":9101"
    ]
    sharding.state-store-mode = ddata
  }
}


slick-journal {
  driver = "slick.jdbc.PostgresProfile$"
  db {
    url = "jdbc:postgresql://"${app.db.host}":"${app.db.port}"/"${app.db.name}
    user = ${app.db.user}
    password = ${app.db.password}
    driver = "org.postgresql.Driver"

    numThreads = 4
    maxConnections = 8
    minConnections = 4
    connectionTestQuery = SELECT 1
  }
}

jdbc-journal {
  event-adapters {
    proto = "ru.pavkin.ihavemoney.serialization.adapters.ProtoEventAdapter"
  }
  event-adapter-bindings {
    "ru.pavkin.ihavemoney.domain.fortune.FortuneProtocol$FortuneEvent" = proto
    "com.trueaccord.scalapb.GeneratedMessage" = proto
  }

  tables {
    journal {
      tableName = "journal"
      schemaName = ""
    }

    deletedTo {
      tableName = "deleted_to"
      schemaName = ""
    }
  }
  slick = ${slick-journal}
}

jdbc-read-journal {
  refresh-interval = "500ms"

  tables {
    journal {
      tableName = "journal"
      schemaName = ""
    }
  }

  slick = ${slick-journal}
}

jdbc-snapshot-store {
  tables {
    snapshot {
      tableName = "snapshot"
      schemaName = ""
    }
  }
  slick = ${slick-journal}
}

smtp {
  tls = true
  tls = ${?ihavemoney_writeback_smtp_tls}
  ssl = true
  ssl = ${?ihavemoney_writeback_smtp_ssl}
  port = 465
  port = ${?ihavemoney_writeback_smtp_port}
  host = "smtp.gmail.com"
  host = ${?ihavemoney_writeback_smtp_host}
  user = "example@gmail.com"
  user = ${?ihavemoney_writeback_smtp_user}
  password = "changeit"
  password = ${?ihavemoney_writeback_smtp_password}
}
